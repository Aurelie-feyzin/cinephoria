name: CI

on:
  push:
    branches:
      - main
  pull_request: ~
  workflow_dispatch: ~

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  # --------------------------
  # Job 1: Setup Docker & Services
  # --------------------------
  setup:
    name: Setup Docker & Services
    runs-on: ubuntu-latest
    env:
      SERVER_NAME: localhost
      TRUSTED_HOSTS: ^(localhost|cinephoria.dvp|192.168.1.48|php)$
      CI_CADDY_HOST_BLOCK: |
        http://localhost {
          import cinephoria
        }
    steps:
      - name: Debug SERVER_NAME
        run: echo $SERVER_NAME
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker builder
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-
      - name: Build Docker images
        uses: docker/bake-action@v6
        with:
          pull: true
          load: true
          files: |
            compose.yaml
            compose.override.yaml
          set: |
            php.cache-from=type=gha,scope=php-${{github.ref}}
            php.cache-from=type=gha,scope=php-refs/heads/main
            php.cache-to=type=gha,scope=php-${{github.ref}},mode=max
            pwa.cache-from=type=gha,scope=pwa-${{github.ref}}
            pwa.cache-from=type=gha,scope=pwa-refs/heads/main
            pwa.cache-to=type=gha,scope=pwa-${{github.ref}},mode=max
      - name: Start PHP container
        run: docker compose up --wait --no-build php
      - name: Save vendor artifact
        uses: actions/upload-artifact@v4
        with:
          name: php-vendor
          path: ./api/vendor

  # --------------------------
  # Job 2: PHP Quality Checks
  # --------------------------
  php-quality:
    name: PHP Quality
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Start services
        uses: actions/download-artifact@v4
        with:
          name: php-vendor
          path: ./api/vendor
      - name: Start PHP container
        run: docker compose up --wait php
      - name: PHP fix coding style
        run: make fix-cs
      - name: PHP Mess Detector
        run: make phpmd
      - name: PHPStan Analysis
        run: docker compose exec -T php php vendor/bin/phpstan analyse --configuration=phpstan-ci.neon --memory-limit=-1

  # --------------------------
  # Job 3: PWA Quality & Build
  # --------------------------
  pwa-quality:
    name: PWA Quality & Build
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Start services
        run: docker compose up -d php pwa
      - name: Wait for PWA
        run: |
          for i in {1..30}; do
            if curl -sSf http://localhost:3000 >/dev/null; then
              echo "PWA is ready!"
              break
            fi
            echo "Waiting for PWA..."
            sleep 2
          done
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false
      - uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pwa/package-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Install PWA dependencies
        run: docker compose exec -T pwa pnpm install --frozen-lockfile
        working-directory: pwa
      - name: PWA quality
        run: make pwa-quality
      - name: PWA Build
        run: docker compose exec -T pwa pnpm build
      - name: Check API reachability
        run: curl -vk --fail-with-body http://localhost

  # --------------------------
  # Job 4: Expo Quality
  # --------------------------
  expo-quality:
    name: Expo Quality
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false
      - uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('react_expo/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - run: pnpm install --frozen-lockfile
        working-directory: react_expo
      - name: Expo Quality
        run: make expo-quality

  # --------------------------
  # Job 5: PHPUnit & Doctrine
  # --------------------------
  php-tests:
    name: PHPUnit & Doctrine
    runs-on: ubuntu-latest
    needs: php-quality
    steps:
      - uses: actions/checkout@v4
      - name: Start services
        uses: actions/download-artifact@v4
        with:
          name: php-vendor
          path: ./api/vendor
      - name: Start PHP container
        run: docker compose up --wait php mailpit
      - name: Create test database
        run: docker compose exec -T php bin/console -e test doctrine:database:create
      - name: Run migrations
        run: docker compose exec -T php bin/console -e test doctrine:migrations:migrate --no-interaction
      - name: Set JWT keys for tests in container
        run: |
          docker compose exec -T php mkdir -p config/jwt
          echo "${{ secrets.JWT_PRIVATE_KEY }}" | docker compose exec -T php tee config/jwt/private-test.pem > /dev/null
          echo "${{ secrets.JWT_PUBLIC_KEY }}" | docker compose exec -T php tee config/jwt/public-test.pem > /dev/null
          docker compose exec -T php chmod 600 config/jwt/private-test.pem
          docker compose exec -T php chmod 644 config/jwt/public-test.pem
          docker compose exec -T php bash -c 'echo "JWT_PASSPHRASE=${{ secrets.JWT_PASSPHRASE_TEST }}" > .env.test.local'
      - name: Run PHPUnit
        run: docker compose exec --workdir /app -T php bin/phpunit
      - name: Doctrine Schema Validator
        run: docker compose exec -T php bin/console -e test doctrine:schema:validate

  # --------------------------
  # Job 6: Security Checks
  # --------------------------
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: setup
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Start services
        run: docker compose up -d php pwa
      - name: Wait for PHP
        run: |
         for i in {1..30}; do
         docker compose exec php php -v && break
         echo "Waiting for PHP..."
         sleep 2
         done
      - name: Security Checks - API
        run: make security-checker
      - name: Security Checks - PWA
        run: make pwa-audit
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false
      - name: Security Checks - Tauri
        run: make tauri-audit
      - name: Security Checks - React Expo
        run: make expo-audit

  # --------------------------
  # Job 7: Docker Lint
  # --------------------------
  lint:
    name: Docker Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Lint Dockerfiles
        uses: hadolint/hadolint-action@v3.1.0
        with:
          recursive: true
